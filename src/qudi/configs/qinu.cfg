#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
   # remote_modules_server:
   #     address: '129.69.46.82'
   #     port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding f lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
   # setup_control_gui:
   #     module.Class: 'setup_control.setup_control.SetupControlGui'
        #connect:
        #    Setup_Control_Logic: setup_control_logic_QINU

    setup_control:
        module.Class: setup_control_old.setupcontrolgui.SetupControlGUI
        connect:
            setupcontrollogic: setupcontrollogic
        options: {}

logic:
    setupcontrollogic:
        module.Class: setup_control.setup_control.SetupControlLogicQINU
        connect:
            Adwin_IO: adwin_IO
        options: {}

hardware:

    adwin_base:
        module.Class: 'jaeger_computer_technik.adwin_base.AdwinBase'
    
    adwin_IO:
        module.Class: 'jaeger_computer_technik.adwin_IO.Adwin_IO'
        options:
            ports:
                digital:
                    3: 
                        name: 'green_laser'
                        IO: 'in'
        
                    0:
                        name: 'lamp'
                        IO: 'in'

                    6:
                        name: 'flip_powermeter'
                        'IO': 'in'
                
                analog:
                    5:
                        name: 'green_laser_attenuation'


    adwin_scanner:
        module.Class: 'interfuse.adwin_scanning_probe_interfuse.AdwinScanningProbeInterfuseBare'
         connect:
            scan_hardware: 'adwin_tt_io'
            analog_output: 'adwin_ao'
        
        options:
            ni_channel_mapping:
                z: 'ao2'
                x: 'ao0'
                y: 'ao1'
                APD1: 'tt_1'
                APD2: 'tt_2'
                APD3: 'tt_3'

                #AI0: 'ai0'
                #APD3: 'PFI10'
            sum_channels: ["tt_1", "tt_2"]
            scan_units: 'm'
            position_ranges: # in m
                z: [-5e-6, 15e-6]
                x: [-200e-6, 200e-6]
                y: [-200e-6, 200e-6]
            frequency_ranges:
                z: [1, 300]
                x: [1, 300]
                y: [1, 300]
            resolution_ranges:
                z: [1, 1000]
                x: [1, 1000]
                y: [1, 1000]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                APD3: 'c/s'
                #AI0: 'V's
                #APD2: 'c/s'
                #APD3: 'c/s'
            
            #backwards_line_resolution: 200 # optional
            maximum_move_velocity: 20e-6 #400e-6 #m/s 
            
            default_samples_number: 50
            max_counts: 3e7
            read_write_timeout: 10
            counting_edge_rising: True
            scanner_counter_channels: ['1','2']
                



   